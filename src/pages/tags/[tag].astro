---
import BaseLayout from '../../layouts/BaseLayout.astro'
import Title from '../../components/Title.astro'
import PostItem from '../../components/PostItem.astro'
import type { FrontMatter } from '@/types/frontMatter'


interface Props {
  posts: Post[];
}

type Post = {
  url: string;
  frontmatter: FrontMatter
}

type GetStaticPathsResult = {
  params: {
    tag: string;
  };
  props: {
    posts: Post[]
  }
}

export async function getStaticPaths(): Promise<GetStaticPathsResult> {
  const allPosts = await Astro.glob<FrontMatter>('../posts/*.md');

  const uniqueTags: any = [...new Set(allPosts.map((post: any) => post.frontmatter.tags).flat())];

  return uniqueTags.map((tag: any) => {
    const filteredPosts = allPosts.filter((post: any) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;
const filteredPosts = posts.filter((post: any) => post.frontmatter.tags?.includes(tag));
---

<BaseLayout title={tag}>
  <main>
		<Title title={tag} />
		<div class="articles">
			{filteredPosts.map((post) => 
			<PostItem 
			isLast={post === filteredPosts[filteredPosts.length - 1]}
			class:list={['article']}
			url={post.url!} 
			description={post.frontmatter.description}
			title={post.frontmatter.title} 
			date={post.frontmatter.publishedAt} 
			tags={post.frontmatter.tags} 
			/>)}
		</div>
	</main>
</BaseLayout>

<style>
	main {
		padding: var(--space-xxl) var(--space-m);
	}

	.articles {
		display: flex;
		flex-direction: column;
		gap: var(--space-l);
	}

@media (width >= 768px) {

	main {
		width: 50%;
		margin: 0 auto;
	}
}
</style>